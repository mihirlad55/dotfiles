#!/usr/bin/bash

IMAGE_PATH="$HOME/Backgrounds/lockscreen.png"
SOURCE_IMAGE="$HOME/Backgrounds/99000X-04.png"

insidecolor=#00000000
ringcolor=#ffffffff
keyhlcolor=#d23c3dff
bshlcolor=#d23c3dff
separatorcolor=#00000000
insidevercolor=#00000000
insidewrongcolor=#d23c3dff
ringvercolor=#ffffffff
ringwrongcolor=#ffffffff
verifcolor=#ffffffff
timecolor=#ffffffff
datecolor=#ffffffff
boxcolor=#00000066

function get_color_from_xres() {
    xres="$(xrdb -query)"
    xres_prefix="i3lock"
    res_name="$xres_prefix.$1"
    color=$(echo "$xres" | grep -o "$res_name.*$" | sed -e "s/$res_name:[\t ]*#//")
    
    len=${#color}

    if [[ $len -eq 6 ]]; then
        color="${color}FF"
    elif [[ $color = "" ]]; then
        echo $2
    fi

    echo $color
}

function get_xresources() {
    xres_prefix="i3lock"

    insidecolor=$(get_color_from_xres insidecolor 00000000)
    ringcolor=$(get_color_from_xres ringcolor ffffffff)
    keyhlcolor=$(get_color_from_xres keyhlcolor d23c3dff)
    bshlcolor=$(get_color_from_xres bshlcolor d23c3dff)
    separatorcolor=$(get_color_from_xres separatorcolor 00000000)
    insidevercolor=$(get_color_from_xres insidevercolor 00000000)
    insidewrongcolor=$(get_color_from_xres insidewrongcolor 23c3dff)
    ringvercolor=$(get_color_from_xres ringvercolor ffffffff)
    ringwrongcolor=$(get_color_from_xres ringwrongcolor ffffffff)
    verifcolor=$(get_color_from_xres verifcolor ffffffff)
    timecolor=$(get_color_from_xres timecolor ffffffff)
    datecolor=$(get_color_from_xres datecolor ffffffff)
}

function mpris_get_status() {
    local dest status reply
    dest="$1"

    reply="$(dbus-send \
        --session \
        --dest="$dest" \
        --type=method_call \
        --print-reply=literal \
        /org/mpris/MediaPlayer2 \
        org.freedesktop.DBus.Properties.Get \
        string:'org.mpris.MediaPlayer2.Player' \
        string:'PlaybackStatus')"

    if echo "$reply" | grep -q "variant"; then
        status="$(echo "$reply" | tr -s ' ' | sed 's/ *//' | cut -d' ' -f2)"
        echo "$status"
        return 0
    else
        return 1
    fi
}

function dbus_dest_exists() {
    local dest names
    dest="$1"

    mapfile -t names < <(dbus-send --session \
        --print-reply=literal \
        --dest=org.freedesktop.DBus \
        /org/freedesktop/DBus \
        org.freedesktop.DBus.ListNames)

    if echo "${names[@]}" | grep -q -F "$dest"; then
        return 0
    else
        return 1
    fi
}

function is_chromium_playing() {
    local pids p status dest

    mapfile -t pids < <(pgrep chromium)

    for p in "${pids[@]}"; do
        dest="org.mpris.MediaPlayer2.chromium.instance$p"

        if dbus_dest_exists "$dest"; then
            status="$(mpris_get_status "$dest")"
            if [[ "$status" == "Playing" ]]; then
                return 0
            else
                return 1
            fi
        fi
    done

    return 1
}

function enable() {
    rm -f /tmp/.xautolock-disabled
    xautolock -enable
    notify-send "Xautolock" "Xautolock is enabled" -u normal
}

function disable() {
    xautolock -disable
    notify-send "Xautolock" "Xautolock is disabled" -u critical
    touch /tmp/.xautolock-disabled
}

function toggle() {
    if [[ -f "/tmp/.xautolock-disabled" ]]; then
        enable
    else
        disable
    fi
}

function status() {
    if [[ -f "/tmp/.xautolock-disabled" ]]; then
        echo "$DISABLED_ICON"
    else
        echo "$ENABLED_ICON"
    fi
}

function hide_windows() {
    local i tagset
    mapfile -t tagsets < <(dwm-msg get_monitors | jq '.[].tagset.current')

    i=0
    for tagset in "${tagsets[@]}"; do
      echo "$tagset"
      dwm-msg --ignore-reply run_command focusmonnum "$i"
      dwm-msg --ignore-reply run_command toggleview "$tagset"
      i=$((i + 1))
    done
}

function show_windows() {
    local i tagset

    i=0
    for tagset in "${tagsets[@]}"; do
      echo "$tagset"
      dwm-msg --ignore-reply run_command focusmonnum "$i"
      dwm-msg --ignore-reply run_command toggleview "$tagset"
      i=$((i + 1))
    done

}

function prelock() {
    physlock -l

    hide_windows

    # Disable dunst
	if [[ -n "$(pidof dunst)" ]]; then
		pkill -x -u "$USER" -USR1 dunst
        touch /tmp/.dunst-disabled
	fi
}

function postlock() {
    physlock -L

    show_windows

    # Enable dunst
	if [[ -n "$(pidof dunst)" ]]; then
        rm -f /tmp/.dunst-disabled
		pkill -x -u "$USER" -USR2 dunst
	fi
}

function lock() {
    i3lock -n \
        --time-str="%I:%M %p" \
        -t -i "$IMAGE_PATH" \
        --time-pos='x+960:y+400' --time-align 0 \
        --time-font="Roboto" --time-size="80" \
        --date-pos='x+960:y+435' --date-align 0 --date-str="%A, %B %d, %Y" \
        --date-font="Roboto" --date-size="24" \
        --clock \
        --inside-color=$insidecolor --ring-color=$ringcolor --line-uses-inside \
        --keyhl-color=$keyhlcolor --bshl-color=$bshlcolor --separator-color=$separatorcolor \
        --insidever-color=$insidevercolor --insidewrong-color=$insidewrongcolor \
        --ringver-color=$ringvercolor --ringwrong-color=$ringwrongcolor --ind-pos='x+960:y+505' \
        --radius=20 --ring-width=4 --verif-text='' --wrong-text='' \
        --verif-color="$verifcolor" --time-color="$timecolor" --date-color="$datecolor" \
        --noinput-text='' --force-clock --pass-media-keys
}

function create_image() {
    convert "$SOURCE_IMAGE" -resize 1920x1080 -quality 100 \
        -draw "fill $boxcolor roundrectangle 700,300,1220,550 15,15" \
        "$IMAGE_PATH"
}

case "$1" in
    update)
        create_image
        ;;
    autolock)
        if ! is_chromium_playing; then
            get_xresources
            prelock
            lock || true
            postlock
        else
            echo "Not locking screen. Chromium is playing"
            exit 1
        fi
        ;;
    disable)
        disable
        ;;
    enable)
        enable
        ;;
    toggle)
        toggle
        ;;
    status)
        DISABLED_ICON="$2"
        ENABLED_ICON="$3"
        status
        ;;
    "")
        get_xresources
        prelock
        lock || true
        postlock
        ;;

esac
